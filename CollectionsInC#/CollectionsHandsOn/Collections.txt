COLLECTIONS:
1. Collections are abstractions of data algorithms.
2. An ArrayList is an abstract dynamic array, a Hashtable collection abstracts a lookup table, a Queues collection 
abstracts queues and so on.


ARRAYLIST COLLECTION:
An ArrayList is a dynamic array and implements the IList interface. 

Benefits of ArrayLists:
Insert Elements: An ArrayList starts with a collection containing no elements. You can add them in any position as you choose them.
Automatic Resizing: you do not need to specify the array size; as you add elements, the array automatically ensures 
there is enough memory for the array.
Flexibility When Removing Elements: you can remove any element from an Arraylist very easily.

Limitations of ArrayLists:
The flexibility of ArrayList comes at a cost of performance. 
Since memory allocation is a very expensive business, the fixed number of elements of the simple array makes it 
much faster to work with.



What is Generic List<T> Collection in C#?
The Generic List<T> Class in C# is a collection class that is present in System.Collections.Generic namespace. 
This Generic List<T> Collection Class represents a strongly typed list of objects which can be accessed by 
using the index. It also provides methods that can be used for searching, sorting, and manipulating the list items.

We can create a collection of any data type by using the generic list class in C#. For example, 
if we want then we can create a list of strings, a list of integers, and even though it is also possible to 
create a list of the user-defined complex type such as a list of customers, a list of products, etc. 
The most important point
that you need to keep in mind is the size of the collection grows automatically when we add items to the collection.

using System.Collections.Generic;
List<Type> listName = new List<Type>();

Adding Elements using Add Method of the List Class:
List<string> countries = new List<string>();
countries.Add(“India”);
countries.Add(“Srilanka”);

Using for-each loop we can Access List<T> Collection in C#



What is Dictionary<TKey, TValue> Class in C#?
The Dictionary in C# is a Generic Collection that stores the element in the form of Key-Value Pairs. 
The working of the Generic Dictionary is very much similar to the working of the Non-Generic Hashtable collection. 
The difference is while creating the generic dictionary object we need to specify the type for both the keys as well as
the type for values. As Dictionary<TKey, TValue> is a generic collection class, so it belongs to System.Collection.
Generic namespace.


Following are a few points that you need to remember while working with Dictionary in C#.
In Generic Dictionary<TKey, TValue> Collection, the key cannot be null, but the value can be null if its type TValue is a reference type.
Every key in Generic Dictionary<TKey, TValue> Collection must be unique according to the dictionary’s equality comparer. 
Duplicate keys are not allowed. If you try to add a duplicate key then the compiler will throw an exception.
In Generic Dictionary<TKey, TValue> Collection, you can only store the same types of elements.
The capacity of a Dictionary collection is the number of elements that the Dictionary can hold.

to create an instance of the Dictionary<TKey,TValue> class using the Dictionary() constructor as follows:
Dictionary<KeyDataType, ValuDataType> dictionary_name = new Dictionary<KeyDataType, ValuDataType>();