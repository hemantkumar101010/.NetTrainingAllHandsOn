Link : Parallel Programming
https://www.csharpstar.com/parallel-programming-csharp/#:~:text=Summary-,What%20is%20Parallel%20Programming%3F,the%20sake%20of%20better%20performance
https://zetcode.com/csharp/async-await/
https://o7planning.org/10553/csharp-multithreading
https://www.wikitechy.com/tutorials/csharp/csharp-multithreading


What is Parallel Programming?
Parallel programming is a programming technique wherein the execution flow of the application is broken up into pieces that will be done at the same 
time (concurrently) by multiple cores, processors, or computers for the sake of better performance.

>Synchronus execution
>Asynchronus execution

In Synchronus execution, the program runs all tasks in sequence.
That means when each task is triggered then the program waits until it finishes before starting the next one.

In Asynchronus execution, the program doesn’t run all tasks in sequence.
That means it fires the tasks concurrently, and then waits for their end

(synchronously, you wait for it to finish before moving on to another task. When you execute something asynchronously, 
you can move on to another task before it finishes.)


The advantages and disadvantages of both programming modes:
In Synchronus mode, every task executes in sequence, so it’s easier to program. That’s the way we’ve been doing it for years.

With asynchronous execution, you have few challenges:
You must synchronize tasks. for e.g. you run a task that must be executed after the other three have finished. You will have to create a mechanism 
to wait for all tasks to finish before launching the new task.
You must address concurrency issues. If you have a shared resource, like a list that is written in one task and read in another, 
make sure that it’s kept in a known state.
There is no logical sequence anymore. The tasks can end at any time, and you don’t have control of which one finishes first.


What is a Thread?
A Thread is the smallest unit of code to which an operating system allocates CPU time.
In multithreading, a single process has multiple threads of execution.If the system has multiple cpu’s then it can run in parallel.

examples to understand it better.

1.You have a program that checks dozen websites to get pricing information for a product.
So in this case, if the program does everything in single thread:

Then the main program is blocked until the web search finishes.
The user interface is stuck and the user can’t do anything
But if you run the web interface and search in different threads then the program can remain responsive even while the search is still running.


2. Multithreading can also simplify your code. 
for e.g. you have a program that periodically checks a collection of websites for news and stock
prices. You can write a program that repeatedly loops through each of the site to check them one after another and that would be complicated.
Another approach would be to assign separate thread to each website and let each thread run 
independently.Now each thread will focus only on one website.



Different methods for Multithreading:

>Tasks
The task class let you create and run threads.
>Threads
The Thread class gives you lower level access to threads.


Methods in Thread Class :
Methods	Purpose
Abort         -      To Terminate/stop the Thread
Join		  -		 It is called on the main thread to let it wait until the other thread finishes.
ResetAbort	  -      Cancels an Abort for current thread
Sleep	      -      Suspends Thread for specified amount of time
Start	      -      Starts the Thread
Yield	      -      Yields execution to another thread if one is ready to run